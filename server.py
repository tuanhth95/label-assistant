# =========================================================================
#  File: server.py (C·∫≠p nh·∫≠t l·ªõn - Server)
#  M·ª•c ƒë√≠ch: Tri·ªÉn khai lu·ªìng h·ªçc ch·ªß ƒë·ªông c√≥ tr·∫°ng th√°i, ch·ªù ƒë·ª£i
#           ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng v√† ƒë∆∞a c√°c tham s·ªë l√™n ƒë·∫ßu.
# =========================================================================
import asyncio
import websockets
import json
import logging
import random

logging.basicConfig(level=logging.INFO)

# =========================================================================
# C√ÅC THAM S·ªê C·∫§U H√åNH
# =========================================================================
TOTAL_SAMPLES = 3      # T·ªïng s·ªë m·∫´u trong b·ªô d·ªØ li·ªáu m√¥ ph·ªèng
BATCH_SIZE = 2          # S·ªë m·∫´u g·ª≠i ƒëi trong m·ªói v√≤ng l·∫∑p
# =========================================================================


# --- D·ªØ li·ªáu v√† Tr·∫°ng th√°i c·ªßa Server ---
# M√¥ ph·ªèng d·ªØ li·ªáu ƒë∆∞·ª£c load s·∫µn
DATASET = [
    {"id": i, "raw_text": f"This is the full text of document {i}.", "anchor_text": f"Anchor {i}"}
    for i in range(1, TOTAL_SAMPLES + 1)
]
unlabeled_indices = list(range(len(DATASET)))
random.shuffle(unlabeled_indices) # X√°o tr·ªôn ƒë·ªÉ b·ªëc m·∫´u ng·∫´u nhi√™n

current_batch_ids = []
received_labels_in_batch = {}
current_round = 0

async def send_next_batch(websocket):
    """Ch·ªçn v√† g·ª≠i m·ªôt batch m·ªõi cho client."""
    global current_batch_ids, received_labels_in_batch
    
    if not unlabeled_indices:
        await websocket.send(json.dumps({"type": "status_update", "payload": "All data has been labeled! Process complete."}))
        return

    # Reset l·∫°i tr·∫°ng th√°i cho batch m·ªõi
    received_labels_in_batch.clear()
    
    # B·ªëc m·∫´u ti·∫øp theo
    batch_to_send_indices = unlabeled_indices[:BATCH_SIZE]
    current_batch_ids = [DATASET[i]['id'] for i in batch_to_send_indices]
    
    logging.info(f"Sending batch with IDs: {current_batch_ids}")
    
    for index in batch_to_send_indices:
        sample = DATASET[index]
        message = {"type": "data_to_label", "payload": sample}
        await websocket.send(json.dumps(message))
        await asyncio.sleep(0.1)
    
    # C·∫≠p nh·∫≠t l·∫°i danh s√°ch ch∆∞a g√°n nh√£n
    num_sent = len(batch_to_send_indices)
    del unlabeled_indices[:num_sent]
    logging.info(f"Removed {num_sent} samples from unlabeled pool. Remaining: {len(unlabeled_indices)}")

async def train_and_evaluate(websocket):
    """M√¥ ph·ªèng vi·ªác hu·∫•n luy·ªán, ƒë√°nh gi√°, v√† g·ª≠i k·∫øt qu·∫£."""
    global current_round
    current_round += 1
    
    logging.info(f"--- Round {current_round}: Training with {len(received_labels_in_batch)} new labels... ---")
    await websocket.send(json.dumps({"type": "status_update", "payload": f"Round {current_round}: Training model..."}))
    await asyncio.sleep(3) # Gi·∫£ l·∫≠p th·ªùi gian hu·∫•n luy·ªán
    
    logging.info(f"--- Round {current_round}: Evaluating model... ---")
    evaluation_result = {
        "type": "evaluation_result",
        "payload": {
            "round": current_round,
            "metrics": {"rouge-1": 0.40 + (current_round * 0.05)}
        }
    }
    await websocket.send(json.dumps(evaluation_result))
    
    # G·ª≠i batch ti·∫øp theo
    await send_next_batch(websocket)

async def handler(websocket):
    """X·ª≠ l√Ω k·∫øt n·ªëi v√† c√°c l·ªánh t·ª´ client."""
    logging.info(f"‚úÖ Client connected from: {websocket.remote_address}")
    
    try:
        async for message in websocket:
            command = json.loads(message)
            logging.info(f"‚¨ÖÔ∏è Received command: {command}")
            
            if command.get("action") == "start_process":
                # Khi nh·∫≠n ƒë∆∞·ª£c l·ªánh start, b·∫Øt ƒë·∫ßu g·ª≠i batch ƒë·∫ßu ti√™n
                await send_next_batch(websocket)
            
            elif command.get("action") == "submit_label":
                label_data = command.get("payload")
                try:
                    sample_id = int(label_data.get("id"))
                except (ValueError, TypeError):
                    logging.warning(f"Received invalid non-integer ID: {label_data.get('id')}")
                    continue

                logging.info(f"[DEBUG] Current Batch IDs: {current_batch_ids}")
                logging.info(f"[DEBUG] Received Labels Dict Keys: {list(received_labels_in_batch.keys())}")
                if sample_id in received_labels_in_batch:
                    logging.warning(f"[DEBUG] Duplicate label submission for ID: {sample_id}. Overwriting.")

                if sample_id in current_batch_ids:
                    received_labels_in_batch[sample_id] = label_data.get("summary")
                    logging.info(f"Received label for {sample_id}. Total received in batch: {len(received_labels_in_batch)}/{len(current_batch_ids)}")
                    
                    # N·∫øu ƒë√£ nh·∫≠n ƒë·ªß nh√£n cho c·∫£ batch, ti·∫øn h√†nh hu·∫•n luy·ªán
                    if len(received_labels_in_batch) == len(current_batch_ids):
                        await train_and_evaluate(websocket)
                else:
                    logging.warning(f"Received label for ID '{sample_id}' which is not in the current batch.")

    except websockets.exceptions.ConnectionClosed:
        logging.info("‚ùå Client disconnected.")

async def main():
    logging.info("üöÄ Server starting... Data loaded. Waiting for client connection and 'start_process' command.")
    async with websockets.serve(handler, "0.0.0.0", 8765):
        await asyncio.Future()

if __name__ == "__main__":
    asyncio.run(main())